datasource db {
  provider = "postgresql" // ou "postgresql" / "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ROLE {
  RESIDENT
  DOORMAN
  MANAGER
  OWNER
  ADMIN
}
enum EntryExitType {
  ENTRY
  EXIT
}

model Tenant {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  entryExits EntryExit[]
  residents  Resident[]

  Visit Visit[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      ROLE     @default(RESIDENT)

  firstAccess Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personId  Int
  tenantId  Int
  person    Person   @relation(fields: [personId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model Person {
  id        Int      @id @default(autoincrement())
  name      String
  cpf       String @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  residents Resident[]
}

model Resident {
  id        Int      @id @default(autoincrement())
  personId  Int
  tenantId  Int
  apartment String
  block     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  person    Person   @relation(fields: [personId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  entryExit EntryExit[]

  Visit Visit[]
}

model EntryExit {
  id          Int      @id @default(autoincrement())
  residentId  Int
  tenantId    Int
  type        EntryExitType
  createdAt   DateTime @default(now())

  resident    Resident @relation(fields: [residentId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model Visitor {
  id        Int      @id @default(autoincrement())
  name      String
  cpf       String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visits    Visit[]
}

model Visit {
  id          Int      @id @default(autoincrement())
  visitorId   Int
  residentId  Int
  tenantId    Int
  entryTime   DateTime @default(now())
  exitTime    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  visitor     Visitor  @relation(fields: [visitorId], references: [id])
  resident    Resident @relation(fields: [residentId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}